/**
 * Alicia Server - dedicated server software
 * Copyright (C) 2024 Story Of Alicia
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 **/

#include "libserver/registry/PetRegistry.hpp"

#include <spdlog/spdlog.h>
#include <yaml-cpp/yaml.h>

namespace server::registry
{

PetRegistry::PetRegistry()
{
  _eggs = {
    // City Eggs
    {90006, {90006, std::chrono::hours(9), {99150, 99151, 99152, 99058, 99059, 99060, 99061}}},
    {90007, {90007, std::chrono::hours(41), {99153, 99154, 99155, 99062, 99063, 99064, 99065}}},
    {90008, {90008, std::chrono::hours(73), {99156, 99157, 99158, 99066, 99067, 99068, 99069}}},
    {90009, {90009, std::chrono::hours(105), {99159, 99160, 99161, 99070, 99071, 99072, 99073}}},

    // Forest Eggs
    {90010, {90010, std::chrono::hours(9), {99098, 99099, 99100, 99086, 99087, 99088}}},
    {90001, {90001, std::chrono::hours(41), {99101, 99102, 99103, 99089, 99090, 99091}}},
    {90002, {90002, std::chrono::hours(73), {99104, 99105, 99106, 99092, 99093, 99094}}},
    {90003, {90003, std::chrono::hours(105), {99107, 99108, 99109, 99095, 99096, 99097}}},

    // Meadow Eggs
    {90004, {90004, std::chrono::hours(9), {99134, 99135, 99136, 99026, 99027, 99028, 99029, 99110, 99111, 99112}}},
    {90005, {90005, std::chrono::hours(41), {99137, 99138, 99139, 99030, 99031, 99032, 99033, 99113, 99114, 99115}}},
    {90011, {90011, std::chrono::hours(73), {99140, 99141, 99142, 99034, 99035, 99036, 99037, 99116, 99117, 99118}}},
    {90012, {90012, std::chrono::hours(105), {99143, 99144, 99145, 99038, 99039, 99040, 99041, 99119, 99120, 99121}}},

    // Ice Eggs
    {90017, {90017, std::chrono::hours(9), {99162, 99163, 99164, 99174, 99175, 99176}}},
    {90018, {90018, std::chrono::hours(41), {99165, 99166, 99167, 99177, 99178, 99179}}},
    {90019, {90019, std::chrono::hours(73), {99168, 99169, 99170, 99180, 99181, 99182}}},
    {90020, {90020, std::chrono::hours(105), {99171, 99172, 99173, 99183, 99184, 99185}}},

    // Desert Eggs
    {90013, {90013, std::chrono::hours(9), {99042, 99043, 99146, 99074, 99075, 99076, 99122, 99123, 99124}}},
    {90014, {90014, std::chrono::hours(41), {99044, 99045, 99147, 99077, 99078, 99079, 99125, 99126, 99127}}},
    {90015, {90015, std::chrono::hours(73), {99046, 99047, 99148, 99080, 99081, 99082, 99128, 99129, 99130}}},
    {90016, {90016, std::chrono::hours(105), {99048, 99049, 99149, 99083, 99084, 99085, 99131, 99132, 99133}}},
  };
  _pets = {
    {99150, {99150, 150}},
    {99151, {99151, 151}},
    {99152, {99152, 152}},
    {99153, {99153, 153}},
    {99154, {99154, 154}},
    {99155, {99155, 155}},
    {99156, {99156, 156}},
    {99157, {99157, 157}},
    {99158, {99158, 158}},
    {99159, {99159, 159}},
    {99160, {99160, 160}},
    {99161, {99161, 161}},
    {99058, {99058, 58}},
    {99059, {99059, 59}},
    {99060, {99060, 60}},
    {99061, {99061, 70}},
    {99062, {99062, 61}},
    {99063, {99063, 62}},
    {99064, {99064, 63}},
    {99065, {99065, 71}},
    {99066, {99066, 64}},
    {99067, {99067, 65}},
    {99068, {99068, 66}},
    {99069, {99069, 72}},
    {99070, {99070, 67}},
    {99071, {99071, 68}},
    {99072, {99072, 69}},
    {99073, {99073, 73}},
    {99098, {99098, 98}},
    {99099, {99099, 99}},
    {99100, {99100, 100}},
    {99101, {99101, 101}},
    {99102, {99102, 102}},
    {99103, {99103, 103}},
    {99104, {99104, 104}},
    {99105, {99105, 105}},
    {99106, {99106, 106}},
    {99107, {99107, 107}},
    {99108, {99108, 108}},
    {99109, {99109, 109}},
    {99086, {99086, 86}},
    {99087, {99087, 87}},
    {99088, {99088, 88}},
    {99089, {99089, 89}},
    {99090, {99090, 90}},
    {99091, {99091, 91}},
    {99092, {99092, 92}},
    {99093, {99093, 93}},
    {99094, {99094, 94}},
    {99095, {99095, 95}},
    {99096, {99096, 96}},
    {99097, {99097, 97}},
    {99134, {99134, 134}},
    {99135, {99135, 135}},
    {99136, {99136, 136}},
    {99137, {99137, 137}},
    {99138, {99138, 138}},
    {99139, {99139, 139}},
    {99140, {99140, 140}},
    {99141, {99141, 141}},
    {99142, {99142, 142}},
    {99143, {99143, 143}},
    {99144, {99144, 144}},
    {99145, {99145, 145}},
    {99026, {99026, 26}},
    {99027, {99027, 27}},
    {99028, {99028, 28}},
    {99029, {99029, 29}},
    {99030, {99030, 30}},
    {99031, {99031, 31}},
    {99032, {99032, 32}},
    {99033, {99033, 33}},
    {99034, {99034, 34}},
    {99035, {99035, 35}},
    {99036, {99036, 36}},
    {99037, {99037, 37}},
    {99038, {99038, 38}},
    {99039, {99039, 39}},
    {99040, {99040, 40}},
    {99041, {99041, 41}},
    {99110, {99110, 110}},
    {99111, {99111, 111}},
    {99112, {99112, 112}},
    {99113, {99113, 113}},
    {99114, {99114, 114}},
    {99115, {99115, 115}},
    {99116, {99116, 116}},
    {99117, {99117, 117}},
    {99118, {99118, 118}},
    {99119, {99119, 119}},
    {99120, {99120, 120}},
    {99121, {99121, 121}},
    {99162, {99162, 162}},
    {99163, {99163, 163}},
    {99164, {99164, 164}},
    {99165, {99165, 165}},
    {99166, {99166, 166}},
    {99167, {99167, 167}},
    {99168, {99168, 168}},
    {99169, {99169, 169}},
    {99170, {99170, 170}},
    {99171, {99171, 171}},
    {99172, {99172, 172}},
    {99173, {99173, 173}},
    {99174, {99174, 174}},
    {99175, {99175, 175}},
    {99176, {99176, 176}},
    {99177, {99177, 177}},
    {99178, {99178, 178}},
    {99179, {99179, 179}},
    {99180, {99180, 180}},
    {99181, {99181, 181}},
    {99182, {99182, 182}},
    {99183, {99183, 183}},
    {99184, {99184, 184}},
    {99185, {99185, 185}},
    {99042, {99042, 42}},
    {99043, {99043, 43}},
    {99146, {99146, 146}},
    {99044, {99044, 44}},
    {99045, {99045, 45}},
    {99147, {99147, 147}},
    {99046, {99046, 46}},
    {99047, {99047, 47}},
    {99148, {99148, 148}},
    {99048, {99048, 48}},
    {99049, {99049, 49}},
    {99149, {99149, 149}},
    {99074, {99074, 74}},
    {99075, {99075, 75}},
    {99076, {99076, 76}},
    {99077, {99077, 77}},
    {99078, {99078, 78}},
    {99079, {99079, 79}},
    {99080, {99080, 80}},
    {99081, {99081, 81}},
    {99082, {99082, 82}},
    {99083, {99083, 83}},
    {99084, {99084, 84}},
    {99085, {99085, 85}},
    {99122, {99122, 122}},
    {99123, {99123, 123}},
    {99124, {99124, 124}},
    {99125, {99125, 125}},
    {99126, {99126, 126}},
    {99127, {99127, 127}},
    {99128, {99128, 128}},
    {99129, {99129, 129}},
    {99130, {99130, 130}},
    {99131, {99131, 131}},
    {99132, {99132, 132}},
    {99133, {99133, 133}}
  };
}

Egg PetRegistry::GetEgg(server::data::Tid tid)
{
  auto it = _eggs.find(tid);
  if (it != _eggs.end())
  {
    return it->second;
  }

  throw std::runtime_error("Egg with given TID not found.");
}

Pet PetRegistry::GetPet(server::data::Tid tid)
{
  auto it = _pets.find(tid);
  if (it != _pets.end())
    return it->second;

  throw std::runtime_error("Pet with given TID not found");
}

} // namespace server::registry
